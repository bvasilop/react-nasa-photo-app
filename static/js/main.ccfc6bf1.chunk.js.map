{"version":3,"sources":["Toggle.js","DarkModeToggle.js","components/DateInput.js","components/Photo.js","App.js","serviceWorker.js","index.js"],"names":["Toggle","checked","onChange","className","type","id","htmlFor","DarkModeToggle","darkMode","useDarkMode","onClick","disable","value","toggle","enable","DateInput","date","changeDate","photo","selected","placeholderText","moment","format","aria-hidden","Photo","src","url","alt","title","explanation","App","state","getPhoto","fetch","then","response","json","photoData","setState","dateFromInput","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ccfc6bf1.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/label-has-for */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Toggle = ({ checked, onChange }) => (\n  <span className=\"toggle-control\">\n    <input\n      className=\"dmcheck\"\n      type=\"checkbox\"\n      checked={checked}\n      onChange={onChange}\n      id=\"dmcheck\"\n    />\n    <label htmlFor=\"dmcheck\" />\n  </span>\n);\n\nToggle.propTypes = {\n  checked: PropTypes.bool,\n  onChange: PropTypes.func,\n};\n\nexport default Toggle;\n","import React from 'react';\n\nimport useDarkMode from 'use-dark-mode';\nimport Toggle from './Toggle';\n\nconst DarkModeToggle = () => {\n  const darkMode = useDarkMode(false);\n\n  return (\n    <div className=\"dark-mode-toggle\">\n      <button type=\"button\" onClick={darkMode.disable}>\n        ☀\n      </button>\n      <Toggle checked={darkMode.value} onChange={darkMode.toggle} />\n      <button type=\"button\" onClick={darkMode.enable}>\n        ☾\n      </button>\n    </div>\n  );\n};\n\nexport default DarkModeToggle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst DateInput = ({ date, changeDate, photo }) => (\n  <div className=\"input-container\">\n    <div className=\"ui large icon input\">\n      <div className=\"ui label label\">Select a Date:</div>\n      <DatePicker\n        type=\"button\"\n        selected={date}\n        onChange={changeDate}\n        placeholderText={moment(photo.date).format('MMMM Do, YYYY')}\n        aria-hidden=\"true\"\n      />\n      <i aria-hidden=\"true\" className=\"search icon\" />\n    </div>\n  </div>\n);\n\nDateInput.propTypes = {\n  date: PropTypes.number,\n  changeDate: PropTypes.func,\n  photo: PropTypes.object,\n};\nexport default DateInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Photo = ({ photo }) => (\n  <div className=\"ui items\">\n    <div className=\"item\">\n      <img\n        src={photo.url}\n        alt={photo.title}\n        className=\"ui centered big image\"\n      />\n      <div>\n        <h2 className=\"header\">{photo.title}</h2>\n        <p className=\"description\">{photo.explanation}</p>\n      </div>\n    </div>\n  </div>\n);\nPhoto.propTypes = {\n  photo: PropTypes.object,\n};\nexport default Photo;\n","import React from 'react';\nimport moment from 'moment';\nimport DarkModeToggle from './DarkModeToggle';\nimport DateInput from './components/DateInput';\nimport Photo from './components/Photo';\nimport './styles/App.css';\nimport './styles/styles.scss';\n\nexport default class App extends React.Component {\n  state = {\n    date: moment(),\n    photo: '',\n  };\n\n  componentDidMount() {\n    fetch(\n      `https://api.nasa.gov/planetary/apod?api_key=klij40JKvLq3IkKh4F4ZYgtZBM9jhO1VPjPPMwfr`\n    )\n      .then(response => response.json())\n      .then(json => this.setState({ photo: json }));\n  }\n\n  getPhoto = date => {\n    fetch(\n      `https://api.nasa.gov/planetary/apod?date=${date}&api_key=klij40JKvLq3IkKh4F4ZYgtZBM9jhO1VPjPPMwfr`\n    )\n      .then(response => response.json())\n      .then(photoData => this.setState({ photo: photoData }));\n  };\n\n  changeDate = dateFromInput => {\n    this.setState({ date: dateFromInput });\n    this.getPhoto(moment(dateFromInput).format('YYYY-MM-DD'));\n  };\n\n  render() {\n    const { photo, date } = this.state;\n    return (\n      <div>\n        <div className=\"navbar-container\">\n          <div className=\"navbar\">\n            <DarkModeToggle />\n          </div>\n        </div>\n        <br />\n        <div className=\"ui container\">\n          <div className=\"ui raised segment\">\n            <h1>NASA Astronomy Picture of the Day</h1>\n            <DateInput\n              photo={photo}\n              changeDate={this.changeDate}\n              value={this.dateFromInput}\n            />\n            <Photo photo={photo} date={date} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}